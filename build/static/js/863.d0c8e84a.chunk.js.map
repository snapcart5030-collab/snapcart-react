{"version":3,"file":"static/js/863.d0c8e84a.chunk.js","mappings":"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","sources":["components/socket.js","components/ContactPage.jsx"],"sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nexport const socket = io(\"https://snapcart-usja.onrender.com\", {\r\n  transports: [\"websocket\", \"polling\"],\r\n});\r\n\r\n// âœ… Register user after login\r\nexport const registerUserSocket = (userEmail) => {\r\n  if (userEmail) {\r\n    socket.emit(\"register\", userEmail);\r\n    console.log(\"ðŸŸ¢ Registered socket for:\", userEmail);\r\n  }\r\n};\r\n\r\n// âœ… Unregister user on logout\r\nexport const unregisterUserSocket = (userEmail) => {\r\n  if (userEmail) {\r\n    socket.emit(\"unregister\", userEmail);\r\n    console.log(\"ðŸ”´ Unregistered socket for:\", userEmail);\r\n  }\r\n};\r\n","import { toast } from \"react-hot-toast\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useAuth } from \"./AuthProvider\";\r\nimport { socket } from \"./socket\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Contact_Url } from \"./Api_URL_Page\";\r\nimport \"./ContactPage.css\";\r\n\r\nfunction ContactPage() {\r\n  const { user } = useAuth();\r\n  const [messages, setMessages] = useState([]);\r\n  const [textMessage, setTextMessage] = useState(\"\");\r\n  const [typing, setTyping] = useState(\"\");\r\n  const typingTimeout = useRef(null);\r\n  const chatBoxRef = useRef(null);\r\n\r\n  // âœ… Fetch previous messages\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const res = await axios.get(`${Contact_Url()}/${user.email}`);\r\n        setMessages(res.data || []);\r\n      } catch (err) {\r\n        console.error(\"Fetch messages error:\", err);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, [user]);\r\n\r\n  // âœ… Socket connection\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    socket.emit(\"register\", user.email);\r\n\r\n    const handleReceiveMessage = (data) => {\r\n      if (data.sender === user.email) return;\r\n\r\n      setMessages((prev) => {\r\n        const alreadyExists = prev.some(\r\n          (m) => m._id === data.contactId && m.textMessage === data.message\r\n        );\r\n        if (alreadyExists) return prev;\r\n\r\n        const index = prev.findIndex((m) => m._id === data.contactId);\r\n        const updated = [...prev];\r\n\r\n        if (index !== -1) {\r\n          if (data.sender === \"admin@gmail.com\") {\r\n            updated[index].responses = updated[index].responses || [];\r\n            updated[index].responses.push({ message: data.message });\r\n          } else {\r\n            updated[index].textMessage = data.message;\r\n          }\r\n          return updated;\r\n        } else {\r\n          return [\r\n            ...prev,\r\n            {\r\n              _id: data.contactId || Date.now(),\r\n              email: data.email,\r\n              username: data.username || data.sender,\r\n              textMessage: data.message,\r\n              responses:\r\n                data.sender === \"admin@gmail.com\"\r\n                  ? [{ message: data.message }]\r\n                  : [],\r\n            },\r\n          ];\r\n        }\r\n      });\r\n    };\r\n\r\n    const handleTyping = (data) => {\r\n      if (data.sender !== user.email) {\r\n        setTyping(`${data.sender} is typing...`);\r\n        clearTimeout(typingTimeout.current);\r\n        typingTimeout.current = setTimeout(() => setTyping(\"\"), 1500);\r\n      }\r\n    };\r\n\r\n    socket.off(\"receiveMessage\");\r\n    socket.off(\"typing\");\r\n    socket.on(\"receiveMessage\", handleReceiveMessage);\r\n    socket.on(\"typing\", handleTyping);\r\n\r\n    return () => {\r\n      socket.off(\"receiveMessage\", handleReceiveMessage);\r\n      socket.off(\"typing\", handleTyping);\r\n    };\r\n  }, [user]);\r\n\r\n  // âœ… Auto scroll\r\n  useEffect(() => {\r\n    chatBoxRef.current?.scrollTo(0, chatBoxRef.current.scrollHeight);\r\n  }, [messages, typing]);\r\n\r\n  // âœ… Send message\r\n  const handleSend = async () => {\r\n    if (!user) {\r\n      toast.error(\"Please login first to send messages!\");\r\n      return;\r\n    }\r\n\r\n    if (!textMessage.trim()) return;\r\n\r\n    try {\r\n      const res = await axios.post(Contact_Url(), {\r\n        username: user.username,\r\n        email: user.email,\r\n        textMessage,\r\n      });\r\n\r\n      const newMsg = res.data.data;\r\n      setMessages((prev) => [...prev, newMsg]);\r\n\r\n      socket.emit(\"sendMessage\", {\r\n        sender: user.email,\r\n        receiver: \"admin@gmail.com\",\r\n        message: textMessage,\r\n        contactId: newMsg._id,\r\n        username: user.username,\r\n        email: user.email,\r\n      });\r\n\r\n      setTextMessage(\"\");\r\n    } catch (err) {\r\n      console.error(\"Send message error:\", err);\r\n      toast.error(\"Failed to send message. Try again later.\");\r\n    }\r\n  };\r\n\r\n  // âœ… Typing logic\r\n  const handleTyping = (e) => {\r\n    if (!user) {\r\n      toast.error(\"Please login first to type a message!\");\r\n      return;\r\n    }\r\n\r\n    setTextMessage(e.target.value);\r\n    socket.emit(\"typing\", { sender: user.email, receiver: \"admin@gmail.com\" });\r\n  };\r\n\r\n  const handleDeleteAll = async () => {\r\n    if (!user) {\r\n      toast.error(\"Please login first!\");\r\n      return;\r\n    }\r\n\r\n    if (!window.confirm(\"Are you sure you want to delete all your messages?\"))\r\n      return;\r\n\r\n    try {\r\n      await axios.post(`${Contact_Url()}/deleteAll`, { email: user.email });\r\n      setMessages([]);\r\n      toast.success(\"All messages deleted!\");\r\n    } catch (err) {\r\n      console.error(\"Delete all error:\", err);\r\n      toast.error(\"Failed to delete messages.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"my_contact_wrapper_5\">\r\n      <div className=\"my_contact_box_5\">\r\n        <div className=\"chat_header_5\">\r\n          <Link to=\"/\" className=\"bi  bi-arrow-left btn chat_back_btn_5\"></Link>\r\n          <h2>Contact with Admin</h2>\r\n          <button\r\n            onClick={handleDeleteAll}\r\n            disabled={!user}\r\n            className=\"chat_delete_btn_5 bg-transparent\"\r\n            title=\"Delete All\"\r\n          >\r\n            <i className=\"bi btn btn-danger bi-trash-fill\"></i>\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"my_chat_box\" ref={chatBoxRef}>\r\n          {messages.map((msg) => (\r\n            <div\r\n              key={msg._id}\r\n              className={`chat_message_5 ${\r\n                msg.email === user?.email ? \"user_msg_5\" : \"admin_msg_5\"\r\n              }`}\r\n            >\r\n              <p>\r\n                <strong className=\"text-primary fw-bold\">\r\n                  {msg.username || \"You\"}:\r\n                </strong>{\" \"}\r\n                <span className=\"text-danger\">{msg.textMessage}</span>\r\n              </p>\r\n\r\n              {msg.responses?.map((r, j) => (\r\n                <p key={j} className=\"admin_response_5 ms-4\">\r\n                  <strong>Admin:</strong>{\" \"}\r\n                  <span className=\"text-success\">{r.message}</span>\r\n                </p>\r\n              ))}\r\n            </div>\r\n          ))}\r\n          {typing && <p className=\"typing_indicator_5\">{typing}</p>}\r\n        </div>\r\n\r\n        <textarea\r\n          value={textMessage}\r\n          onChange={handleTyping}\r\n          placeholder=\"Write message...\"\r\n          rows={3}\r\n          className=\"my_contact_textarea_5\"\r\n        />\r\n        <button onClick={handleSend} className=\"my_contact_msg_button_5\">\r\n          Send Message\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactPage;\r\n"],"names":["socket","io","transports","registerUserSocket","userEmail","emit","console","log","unregisterUserSocket","user","useAuth","messages","setMessages","useState","textMessage","setTextMessage","typing","setTyping","typingTimeout","useRef","chatBoxRef","useEffect","async","res","axios","get","concat","Contact_Url","email","data","err","error","fetchMessages","handleReceiveMessage","sender","prev","some","m","_id","contactId","message","index","findIndex","updated","responses","push","Date","now","username","handleTyping","clearTimeout","current","setTimeout","off","on","_chatBoxRef$current","scrollTo","scrollHeight","_jsx","className","children","_jsxs","Link","to","onClick","window","confirm","post","toast","success","disabled","title","ref","map","msg","_msg$responses","r","j","value","onChange","e","target","receiver","placeholder","rows","trim","newMsg"],"sourceRoot":""}